AWSTemplateFormatVersion: '2010-09-09'
Description: Elastic LogRotation Stack
Parameters:
  TagName:
    Type: String
    Default: 1234
    Description: Provide a Tag name to identify the architecture.
  ElasticSearchURL:
    Type: String
    Default: http://<url>/
    Description: Elasticsearch Service URL.
  RetentionDateOffset:
    Type: Number
    Default: 30
    Description: Retention Period.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Infrastructure Configuration
        Parameters:
          - TagName
      - Label:
          default: "Retention"
        Parameters:
          - ElasticSearchURL
          - RetentionDateOffset

Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      RoleName: elastic_retention_lambda_role
      Path: /
      Policies:
       - PolicyName: LambdaLogingRole
         PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: 'arn:aws:logs:*:*:*'
       - PolicyName: SNSPublishPolicy
         PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'sns:Publish'
              Resource: 'arn:aws:sns:*:*:*'

  SNSTopic:
    Type: "AWS::SNS::Topic"
    DependsOn: LambdaExecutionRole
    Properties:
      DisplayName: Log Manager
      Subscription:
        - Endpoint: neeraj@qburst.com
          Protocol: email
      TopicName: elastic_retention_mailer


  LambdaFunction:
    Type: "AWS::Lambda::Function"
    DependsOn: SNSTopic
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import subprocess
          import boto3

          def lambda_handler(event,context):
              #Creating delete request
              elasticUrl='${ElasticSearchURL}'
              dateCmd='date --date="${RetentionDateOffset} day ago" +%Y.%m.%d'
              pipe=subprocess.Popen(dateCmd, stdout=subprocess.PIPE, shell=True)
              (output,error)=pipe.communicate()
              date=output.replace('\n','')
              index="cwl-"+date
              curlCommand="curl -XDELETE "+elasticUrl+index

              # Calling delete request
              pipe = subprocess.Popen(curlCommand, stdout=subprocess.PIPE, shell=True)
              (output,error)=pipe.communicate()
              if '{"acknowledged":true}' in output:
                  message = 'Index ' +index+' has been deleted'
              elif "no such index" in output:
                  message = 'No index entry on ' + date
              else:
                  message = 'Oops Something went wrong. Please refer the cloudwatch logs'
              # Initiating the Created  SNS
              client = boto3.client('sns')
              response = client.publish(TargetArn='${SNSTopic}',Message=json.dumps({'default': json.dumps(message)}),MessageStructure='json')
              return response

      Description: Lambda function to trigger monthly log rotation.
      FunctionName: lambda_function
      Handler: index.lambda_handler
      Role : !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: 5

  DailyRetentionRule:
    Type: "AWS::Events::Rule"
    DependsOn: LambdaFunction
    Properties:
      Description: Trigger daily log retention
      Name: DailyRetentionTrigger
      ScheduleExpression: rate(1 day)
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: retention_lambda

  LambdaInvokePermission:
    DependsOn: DailyRetentionRule
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !GetAtt DailyRetentionRule.Arn
